image: ebits/openshift-client

stages:
  - development
  - staging
  - production
  - cleanup

variables:
  TEMPLATE_FILE: "./ocp_template/hmf-frontend-template.yaml"
  TEMPLATE_NAME: hmf-frontend
  COMPONENT_NAME: hmf-frontend

.deploy: &deploy
  before_script:
    - echo $OPENSHIFT_SERVER
    - echo $OPENSHIFT_TOKEN
    - oc login --server="$OPENSHIFT_SERVER" --token="$OPENSHIFT_TOKEN" --insecure-skip-tls-verify
  script:
    #- mv $CONFIG_FILE src/assets/config/config.json
    #- RESULT=0
    #- oc create configmap $APP-config --from-file=src/assets/config/config.json 2> /dev/null || RESULT=$?
    #- echo $RESULT
    #- (if [ "$RESULT" == 1 ]; then
    #        oc delete cm $APP-config;
    #        oc create configmap $APP-config --from-file=src/assets/config/config.json;
    #        oc label configmap $APP-config app=$APP;
    #   fi);
    #- mv $CONFIG_FILE src/assets/config/config.json
    - oc apply -f $TEMPLATE_FILE
    - RESULT=0
    - oc get services $APP 2> /dev/null || RESULT=$?
    - echo $RESULT
    - (if [ "$RESULT" == 1 ]; then
            oc new-app --template $TEMPLATE_NAME -p APP_HOST=$APP_HOST -p APP_NAME=$APP -p SOURCE_REPOSITORY_REF=$CI_COMMIT_REF_NAME -p SOURCE_REPOSITORY_URL=$CI_REPOSITORY_URL;
            exit 0;
       else
            oc start-build $APP-builder;
            exit 0;
       fi);
  tags: [hmf]

review:
  <<: *deploy
  stage: development
  script:
    - oc delete all -l app=$APP && sleep 10s
    #- oc delete configmap $APP-config 2> /dev/null || RESULT=$?
    - oc apply -f $TEMPLATE_FILE
    - oc new-app --template $TEMPLATE_NAME -p APP_HOST=$APP_HOST -p APP_NAME=$APP -p SOURCE_REPOSITORY_REF=$CI_COMMIT_REF_NAME -p SOURCE_REPOSITORY_URL=$CI_REPOSITORY_URL
    #- sleep 5s && mv $CONFIG_FILE src/assets/config/config.json
    #- oc create configmap $APP-config --from-file=src/assets/config/config.json
    #- oc label configmap $APP-config app=$APP
  variables:
    OPENSHIFT_TOKEN: $OPENSHIFT_REVIEW_TOKEN
    APP: review-$CI_COMMIT_REF_NAME
    APP_HOST: $CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$OPENSHIFT_DOMAIN
    CONFIG_FILE: src/assets/config/config_dev.json
  environment:
    name: review/$CI_COMMIT_REF_NAME
    url: http://$CI_PROJECT_NAME-$CI_ENVIRONMENT_SLUG.$OPENSHIFT_DOMAIN
    on_stop: stop-review
  only:
    - branches
  except:
    - master
    - staging
  tags: [hmf]

stop-review:
  <<: *deploy
  stage: cleanup
  script:
    - oc delete all -l app=$APP
    - oc delete configmap $APP-config 2>
  when: manual
  variables:
    OPENSHIFT_TOKEN: $OPENSHIFT_REVIEW_TOKEN
    APP: review-$CI_COMMIT_REF_NAME
    GIT_STRATEGY: none
  environment:
    name: review/$CI_COMMIT_REF_NAME
    action: stop
  only:
    - branches
  except:
    - master
    - staging
  tags: [hmf]

staging:
  <<: *deploy
  stage: staging
  variables:
    APP: $COMPONENT_NAME
    APP_HOST: $CI_PROJECT_NAME-staging.$OPENSHIFT_DOMAIN
    OPENSHIFT_TOKEN: $OPENSHIFT_STAGING_TOKEN
    CONFIG_FILE: src/assets/config/config_stag.json
  environment:
    name: staging
    url: http://$CI_PROJECT_NAME-staging.$OPENSHIFT_DOMAIN
  only:
    - staging
  tags: [hmf]

production:
  <<: *deploy
  stage: production
  variables:
    APP: $COMPONENT_NAME
    APP_HOST: $CI_PROJECT_NAME.$OPENSHIFT_DOMAIN
    OPENSHIFT_TOKEN: $OPENSHIFT_PROD_TOKEN
    CONFIG_FILE: src/assets/config/config_prod.json
  when: manual
  environment:
    name: production
    url: http://$CI_PROJECT_NAME.$OPENSHIFT_DOMAIN
  only:
    - master
  tags: [frontend]
